import torch
import torchvision.transforms as transforms
import torch.nn as nn
import torch.optim as optim
from sklearn.datasets import fetch_lfw_people
from sklearn.model_selection import train_test_split
import os
import torchvision

#定义神经网络模型
class AlexNet(nn.Module):
    def __init__(self, num_classes):
        super(AlexNet, self).__init__()
        self.features = torchvision.models.alexnet(pretrained=True).features
        self.classifier = nn.Sequential(
            nn.Linear(256 * 6 * 6, 4096),
            nn.ReLU(inplace=True),
            nn.Dropout(),
            nn.Linear(4096, 4096),
            nn.ReLU(inplace=True),
            nn.Dropout(),
            nn.Linear(4096, num_classes),
        )

    def forward(self, x):
        x = self.features(x)
        x = x.view(x.size(0), 256 * 6 * 6)
        x = self.classifier(x)
        return x

class ResNet(nn.Module):
    def __init__(self, num_classes):
        super(ResNet, self).__init__()
        self.resnet = torchvision.models.resnet18(pretrained=True)
        self.resnet.fc = nn.Linear(512, num_classes)

    def forward(self, x):
        x = self.resnet(x)
        return x

class VGG(nn.Module):
    def __init__(self, num_classes):
        super(VGG, self).__init__()
        self.vgg = torchvision.models.vgg16(pretrained=True)
        self.vgg.classifier[6] = nn.Linear(4096, num_classes)

    def forward(self, x):
        x = self.vgg(x)
        return x

#在训练数据集上训练神经网络模型
def train(model, train_loader, criterion, optimizer, device):
    model.train()
    running_loss = 0.0
    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item() * inputs.size(0)
    return running_loss / len(train_loader.dataset)

#此函数通过计算数据集的平均损失和准确性来评估微调模型的性能
def fine_tuning(model, test_loader, criterion, device):
    model.eval()
    running_loss = 0.0
    correct = 0
    total = 0
    with torch.no_grad():
        for inputs, labels in test_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            running_loss += loss.item() * inputs.size(0)
            _, predicted = outputs.max(1)
            total += labels.size(0)
            correct += predicted.eq(labels).sum().item()
    return running_loss / len(test_loader.dataset), correct / total

#保存模型权重
def save_weights(model, model_name, scenario):
    if not os.path.exists("weight"):
        os.makedirs("weight")
    torch.save(model.state_dict(), f"weight/{model_name}_Scenario{scenario}.pt")

#获取具有特定参数的LFW数据集
lfw_dataset = fetch_lfw_people(data_home = 'C:/Users/lenovo/Downloads',download_if_missing = True)

X = lfw_dataset.images
y = lfw_dataset.target

#分为测试和训练
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

transform = transforms.Compose([
    transforms.ToPILImage(),
    transforms.Grayscale(num_output_channels=3),  # Convert to RGB
    transforms.Resize((224, 224)),
    transforms.ToTensor()
])

X_train = torch.stack([transform(x) for x in X_train])
X_test = torch.stack([transform(x) for x in X_test])

#将数据转换为PyTorch张量格式
X_train = torch.tensor(X_train, dtype=torch.float32)
X_test = torch.tensor(X_test, dtype=torch.float32)
y_train = torch.tensor(y_train, dtype=torch.long)
y_test = torch.tensor(y_test, dtype=torch.long)

#AlexNet
import numpy as np
import matplotlib.pyplot as plt
# 设置设备（GPU或CPU）
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
# 定义参数
num_classes = len(np.unique(y))
batch_size = 32
learning_rate = 0.0001
num_epochs = 10
# 创建数据加载器
train_dataset = torch.utils.data.TensorDataset(X_train, y_train)
test_dataset = torch.utils.data.TensorDataset(X_test, y_test)
train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=False)
# 初始化模型、损失函数和优化器
model = AlexNet(num_classes=num_classes).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate)
# 训练模型并记录损失
train_losses = []
test_losses = []
test_accuracies = []
for epoch in range(num_epochs):
    print(f'Epoch {epoch+1}/{num_epochs}')
    print('-' * 10)
    # 训练阶段
    train_loss = train(model, train_loader, criterion, optimizer, device)
    train_losses.append(train_loss)
    print(f'Train loss: {train_loss:.4f}')
    # 验证阶段
    test_loss, accuracy = fine_tuning(model, test_loader, criterion, device)
    test_losses.append(test_loss)
    test_accuracies.append(accuracy)
    print(f'Test loss: {test_loss:.4f}, Test accuracy: {accuracy:.4f}')
#保存模型权重
save_weights(model, "alexnet_lfw", 1)

# 可视化训练过程和结果
plt.figure(figsize=(12, 5))
# 损失曲线
plt.subplot(1, 2, 1)
plt.plot(range(1, num_epochs + 1), train_losses, label='Training Loss')
plt.plot(range(1, num_epochs + 1), test_losses, label='Test Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Loss Curve')
plt.legend()
# 准确率曲线
plt.subplot(1, 2, 2)
plt.plot(range(1, num_epochs + 1), test_accuracies, label='Test Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Accuracy Curve')
plt.legend()

plt.tight_layout()
plt.show()

#ResNet
import numpy as np
# 设置设备（GPU或CPU）
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# 定义参数
num_classes = len(np.unique(y))
batch_size = 32
learning_rate = 0.0001
num_epochs = 10

# 创建数据加载器
train_dataset = torch.utils.data.TensorDataset(X_train, y_train)
test_dataset = torch.utils.data.TensorDataset(X_test, y_test)
train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

# 初始化模型、损失函数和优化器
model = ResNet(num_classes=num_classes).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

# 训练模型并记录损失和准确率
train_losses = []
test_losses = []
test_accuracies = []
for epoch in range(num_epochs):
    print(f'Epoch {epoch+1}/{num_epochs}')
    print('-' * 10)
    # 训练阶段
    train_loss = train(model, train_loader, criterion, optimizer, device)
    train_losses.append(train_loss)
    print(f'Train loss: {train_loss:.4f}')
    # 验证阶段
    test_loss, accuracy = fine_tuning(model, test_loader, criterion, device)
    test_losses.append(test_loss)
    test_accuracies.append(accuracy)
    print(f'Test loss: {test_loss:.4f}, Test accuracy: {accuracy:.4f}')

# 保存模型权重
save_weights(model, "ResNet_lfw", 1)

# 可视化训练过程和结果
import matplotlib.pyplot as plt

plt.figure(figsize=(12, 5))

# 损失曲线
plt.subplot(1, 2, 1)
plt.plot(range(1, num_epochs + 1), train_losses, label='Training Loss')
plt.plot(range(1, num_epochs + 1), test_losses, label='Test Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Loss Curve')
plt.legend()

# 准确率曲线
plt.subplot(1, 2, 2)
plt.plot(range(1, num_epochs + 1), test_accuracies, label='Test Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Accuracy Curve')
plt.legend()

plt.tight_layout()
plt.show()

#VGG
import numpy as np
import matplotlib.pyplot as plt

# 设置设备（GPU或CPU）
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# 定义参数
num_classes = len(np.unique(y))
batch_size = 32
learning_rate = 0.0001
num_epochs = 10

# 创建数据加载器
train_dataset = torch.utils.data.TensorDataset(X_train, y_train)
test_dataset = torch.utils.data.TensorDataset(X_test, y_test)
train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

# 初始化模型、损失函数和优化器
model = VGG(num_classes=num_classes).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

# 训练模型并记录损失和准确率
train_losses = []
test_losses = []
test_accuracies = []
for epoch in range(num_epochs):
    print(f'Epoch {epoch+1}/{num_epochs}')
    print('-' * 10)
    # 训练阶段
    train_loss = train(model, train_loader, criterion, optimizer, device)
    train_losses.append(train_loss)
    print(f'Train loss: {train_loss:.4f}')
    # 验证阶段
    test_loss, accuracy = fine_tuning(model, test_loader, criterion, device)
    test_losses.append(test_loss)
    test_accuracies.append(accuracy)
    print(f'Test loss: {test_loss:.4f}, Test accuracy: {accuracy:.4f}')

# 保存模型权重
save_weights(model, "VGG_lfw", 1)

# 可视化训练过程和结果
plt.figure(figsize=(12, 5))

# 损失曲线
plt.subplot(1, 2, 1)
plt.plot(range(1, num_epochs + 1), train_losses, label='Training Loss')
plt.plot(range(1, num_epochs + 1), test_losses, label='Test Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Loss Curve')
plt.legend()

# 准确率曲线
plt.subplot(1, 2, 2)
plt.plot(range(1, num_epochs + 1), test_accuracies, label='Test Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Accuracy Curve')
plt.legend()

plt.tight_layout()
plt.show()
